// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demogrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demogrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demogrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demogrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demogrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demogrpc_2eproto;
namespace DemoGrpc {
class DemoReq;
class DemoReqDefaultTypeInternal;
extern DemoReqDefaultTypeInternal _DemoReq_default_instance_;
class DemoRsp;
class DemoRspDefaultTypeInternal;
extern DemoRspDefaultTypeInternal _DemoRsp_default_instance_;
}  // namespace DemoGrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::DemoGrpc::DemoReq* Arena::CreateMaybeMessage<::DemoGrpc::DemoReq>(Arena*);
template<> ::DemoGrpc::DemoRsp* Arena::CreateMaybeMessage<::DemoGrpc::DemoRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DemoGrpc {

// ===================================================================

class DemoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DemoGrpc.DemoReq) */ {
 public:
  DemoReq();
  virtual ~DemoReq();

  DemoReq(const DemoReq& from);
  DemoReq(DemoReq&& from) noexcept
    : DemoReq() {
    *this = ::std::move(from);
  }

  inline DemoReq& operator=(const DemoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoReq& operator=(DemoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoReq* internal_default_instance() {
    return reinterpret_cast<const DemoReq*>(
               &_DemoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DemoReq& a, DemoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoReq* New() const final {
    return CreateMaybeMessage<DemoReq>(nullptr);
  }

  DemoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoReq& from);
  void MergeFrom(const DemoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DemoGrpc.DemoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demogrpc_2eproto);
    return ::descriptor_table_demogrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
  };
  // string req = 1;
  void clear_req();
  const std::string& req() const;
  void set_req(const std::string& value);
  void set_req(std::string&& value);
  void set_req(const char* value);
  void set_req(const char* value, size_t size);
  std::string* mutable_req();
  std::string* release_req();
  void set_allocated_req(std::string* req);

  // @@protoc_insertion_point(class_scope:DemoGrpc.DemoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demogrpc_2eproto;
};
// -------------------------------------------------------------------

class DemoRsp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DemoGrpc.DemoRsp) */ {
 public:
  DemoRsp();
  virtual ~DemoRsp();

  DemoRsp(const DemoRsp& from);
  DemoRsp(DemoRsp&& from) noexcept
    : DemoRsp() {
    *this = ::std::move(from);
  }

  inline DemoRsp& operator=(const DemoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DemoRsp& operator=(DemoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DemoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DemoRsp* internal_default_instance() {
    return reinterpret_cast<const DemoRsp*>(
               &_DemoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DemoRsp& a, DemoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DemoRsp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DemoRsp* New() const final {
    return CreateMaybeMessage<DemoRsp>(nullptr);
  }

  DemoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DemoRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DemoRsp& from);
  void MergeFrom(const DemoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DemoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DemoGrpc.DemoRsp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demogrpc_2eproto);
    return ::descriptor_table_demogrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRspFieldNumber = 1,
  };
  // string rsp = 1;
  void clear_rsp();
  const std::string& rsp() const;
  void set_rsp(const std::string& value);
  void set_rsp(std::string&& value);
  void set_rsp(const char* value);
  void set_rsp(const char* value, size_t size);
  std::string* mutable_rsp();
  std::string* release_rsp();
  void set_allocated_rsp(std::string* rsp);

  // @@protoc_insertion_point(class_scope:DemoGrpc.DemoRsp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demogrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DemoReq

// string req = 1;
inline void DemoReq::clear_req() {
  req_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DemoReq::req() const {
  // @@protoc_insertion_point(field_get:DemoGrpc.DemoReq.req)
  return req_.GetNoArena();
}
inline void DemoReq::set_req(const std::string& value) {
  
  req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DemoGrpc.DemoReq.req)
}
inline void DemoReq::set_req(std::string&& value) {
  
  req_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DemoGrpc.DemoReq.req)
}
inline void DemoReq::set_req(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DemoGrpc.DemoReq.req)
}
inline void DemoReq::set_req(const char* value, size_t size) {
  
  req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DemoGrpc.DemoReq.req)
}
inline std::string* DemoReq::mutable_req() {
  
  // @@protoc_insertion_point(field_mutable:DemoGrpc.DemoReq.req)
  return req_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DemoReq::release_req() {
  // @@protoc_insertion_point(field_release:DemoGrpc.DemoReq.req)
  
  return req_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DemoReq::set_allocated_req(std::string* req) {
  if (req != nullptr) {
    
  } else {
    
  }
  req_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), req);
  // @@protoc_insertion_point(field_set_allocated:DemoGrpc.DemoReq.req)
}

// -------------------------------------------------------------------

// DemoRsp

// string rsp = 1;
inline void DemoRsp::clear_rsp() {
  rsp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DemoRsp::rsp() const {
  // @@protoc_insertion_point(field_get:DemoGrpc.DemoRsp.rsp)
  return rsp_.GetNoArena();
}
inline void DemoRsp::set_rsp(const std::string& value) {
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DemoGrpc.DemoRsp.rsp)
}
inline void DemoRsp::set_rsp(std::string&& value) {
  
  rsp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DemoGrpc.DemoRsp.rsp)
}
inline void DemoRsp::set_rsp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DemoGrpc.DemoRsp.rsp)
}
inline void DemoRsp::set_rsp(const char* value, size_t size) {
  
  rsp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DemoGrpc.DemoRsp.rsp)
}
inline std::string* DemoRsp::mutable_rsp() {
  
  // @@protoc_insertion_point(field_mutable:DemoGrpc.DemoRsp.rsp)
  return rsp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DemoRsp::release_rsp() {
  // @@protoc_insertion_point(field_release:DemoGrpc.DemoRsp.rsp)
  
  return rsp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DemoRsp::set_allocated_rsp(std::string* rsp) {
  if (rsp != nullptr) {
    
  } else {
    
  }
  rsp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rsp);
  // @@protoc_insertion_point(field_set_allocated:DemoGrpc.DemoRsp.rsp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DemoGrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demogrpc_2eproto
